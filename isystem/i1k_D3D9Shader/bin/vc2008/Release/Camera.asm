; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\Users\Matt\Desktop\C++Projects\DemoScene\isystem\i1k_D3D9Shader\src\Camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

	mov	eax, ecx
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
; Function compile flags: /Ogspy
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

	mov	eax, ecx
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
EXTRN	__fltused:DWORD
; Function compile flags: /Ogspy
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 304  :     x = fx;

	fld	DWORD PTR _fx$[esp-4]
	mov	eax, ecx
	fstp	DWORD PTR [eax]

; 305  :     y = fy;

	fld	DWORD PTR _fy$[esp-4]
	fstp	DWORD PTR [eax+4]

; 306  :     z = fz;

	fld	DWORD PTR _fz$[esp-4]
	fstp	DWORD PTR [eax+8]

; 307  : }

	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z			; D3DXVECTOR3::operator+=
; Function compile flags: /Ogspy
;	COMDAT ??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+=, COMDAT
; _this$ = ecx

; 327  : {

	mov	eax, ecx

; 328  :     x += v.x;

	mov	ecx, DWORD PTR _v$[esp-4]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]

; 329  :     y += v.y;

	fld	DWORD PTR [ecx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+4]

; 330  :     z += v.z;

	fld	DWORD PTR [ecx+8]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+8]

; 331  :     return *this;
; 332  : }

	ret	4
??YD3DXVECTOR3@@QAEAAU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+=
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogspy
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

	mov	edx, DWORD PTR _v$[esp-4]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	fadd	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [edx+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]

; 382  : }

	ret	8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??D@YI?AUD3DXVECTOR3@@MABU0@@Z			; operator*
; Function compile flags: /Ogspy
;	COMDAT ??D@YI?AUD3DXVECTOR3@@MABU0@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
??D@YI?AUD3DXVECTOR3@@MABU0@@Z PROC			; operator*, COMDAT
; ___$ReturnUdt$ = ecx
; _v$ = edx

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

	fld	DWORD PTR [edx]
	mov	eax, ecx
	fmul	DWORD PTR _f$[esp-4]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR _f$[esp-4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR _f$[esp-4]
	fstp	DWORD PTR [eax+8]

; 408  : }

	ret	4
??D@YI?AUD3DXVECTOR3@@MABU0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	__real@00000000
PUBLIC	__real@447a0000
PUBLIC	__real@3f800000
PUBLIC	__real@3f9c61aa
PUBLIC	??0Camera@@QAE@XZ				; Camera::Camera
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f9c61aa
CONST	SEGMENT
__real@3f9c61aa DD 03f9c61aar			; 1.22173
; Function compile flags: /Ogspy
; File c:\users\matt\desktop\c++projects\demoscene\isystem\i1k_d3d9shader\src\camera.cpp
CONST	ENDS
;	COMDAT ??0Camera@@QAE@XZ
_TEXT	SEGMENT
$T55488 = -12						; size = 12
$T55487 = -12						; size = 12
??0Camera@@QAE@XZ PROC					; Camera::Camera, COMDAT
; _this$ = ecx

; 5    : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 6    : 	fov = 1.2217304764f;

	fld	DWORD PTR __real@3f9c61aa
	push	esi
	fstp	DWORD PTR [ecx+308]
	push	edi

; 7    : 	nearPlane = 1.0;

	fld1

; 8    : 	farPlane = 1000.0;
; 9    : 	memset(&position, 0, sizeof(D3DXVECTOR3));

	xor	eax, eax
	fst	DWORD PTR [ecx+304]
	lea	edi, DWORD PTR [ecx+256]
	fld	DWORD PTR __real@447a0000

; 10   : 	forward = D3DXVECTOR3(0,0,-1);

	lea	esi, DWORD PTR $T55487[ebp]
	fstp	DWORD PTR [ecx+300]
	fldz
	stosd
	stosd
	fst	DWORD PTR $T55487[ebp]
	fst	DWORD PTR $T55487[ebp+4]
	fld	DWORD PTR __real@bf800000
	stosd
	fstp	DWORD PTR $T55487[ebp+8]

; 11   : 	strafe = D3DXVECTOR3(1,0,0);

	fxch	ST(1)
	lea	edi, DWORD PTR [ecx+268]
	movsd
	movsd
	movsd
	fstp	DWORD PTR $T55488[ebp]
	fst	DWORD PTR $T55488[ebp+4]
	lea	edi, DWORD PTR [ecx+280]
	fstp	DWORD PTR $T55488[ebp+8]
	lea	esi, DWORD PTR $T55488[ebp]
	movsd
	movsd
	movsd
	pop	edi

; 12   : }

	mov	eax, ecx
	pop	esi
	leave
	ret	0
??0Camera@@QAE@XZ ENDP					; Camera::Camera
_TEXT	ENDS
PUBLIC	??1Camera@@QAE@XZ				; Camera::~Camera
; Function compile flags: /Ogspy
;	COMDAT ??1Camera@@QAE@XZ
_TEXT	SEGMENT
??1Camera@@QAE@XZ PROC					; Camera::~Camera, COMDAT
; _this$ = ecx

; 16   : 
; 17   : }

	ret	0
??1Camera@@QAE@XZ ENDP					; Camera::~Camera
_TEXT	ENDS
PUBLIC	?UpdateMatrices@Camera@@AAEXXZ			; Camera::UpdateMatrices
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixPerspectiveFovRH@20:PROC
EXTRN	_D3DXMatrixLookAtRH@16:PROC
; Function compile flags: /Ogspy
;	COMDAT ?UpdateMatrices@Camera@@AAEXXZ
_TEXT	SEGMENT
_lookAt$ = -28						; size = 12
_up$ = -16						; size = 12
_det$ = -4						; size = 4
?UpdateMatrices@Camera@@AAEXXZ PROC			; Camera::UpdateMatrices, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx

; 49   : 	D3DXVECTOR3 lookAt = position + forward;

	lea	ecx, DWORD PTR [esi+268]
	fld	DWORD PTR [ecx]
	lea	eax, DWORD PTR [esi+256]
	fadd	DWORD PTR [eax]
	push	edi
	fstp	DWORD PTR _lookAt$[ebp]
	fld	DWORD PTR [ecx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR _lookAt$[ebp+4]
	fld	DWORD PTR [ecx+8]

; 50   : 	D3DXVECTOR3 up(0,1,0);
; 51   : 	D3DXMatrixLookAtRH(&view, &position, &lookAt, &up);

	lea	ecx, DWORD PTR _up$[ebp]
	fadd	DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _lookAt$[ebp]
	push	ecx
	fstp	DWORD PTR _lookAt$[ebp+8]
	push	eax
	fldz
	push	esi
	fst	DWORD PTR _up$[ebp]
	fld1
	fstp	DWORD PTR _up$[ebp+4]
	fstp	DWORD PTR _up$[ebp+8]
	call	_D3DXMatrixLookAtRH@16

; 52   : 	D3DXMatrixPerspectiveFovRH(&projection, fov, ASPECT_RATIO, nearPlane, farPlane);

	fld	DWORD PTR [esi+300]
	sub	esp, 16					; 00000010H
	fstp	DWORD PTR [esp+12]
	lea	edi, DWORD PTR [esi+64]
	fld	DWORD PTR [esi+304]
	fstp	DWORD PTR [esp+8]
	fld1
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR [esi+308]
	fstp	DWORD PTR [esp]
	push	edi
	call	_D3DXMatrixPerspectiveFovRH@20

; 53   : 	D3DXMatrixMultiply(&viewProj, &view, &projection);

	push	edi
	push	esi
	lea	ebx, DWORD PTR [esi+128]
	push	ebx
	call	_D3DXMatrixMultiply@12

; 54   : 	float det;
; 55   : 	D3DXMatrixInverse(&invViewProj, &det, &viewProj);

	push	ebx
	lea	eax, DWORD PTR _det$[ebp]
	push	eax
	add	esi, 192				; 000000c0H
	push	esi
	call	_D3DXMatrixInverse@12
	pop	edi
	pop	esi
	pop	ebx

; 56   : }

	leave
	ret	0
?UpdateMatrices@Camera@@AAEXXZ ENDP			; Camera::UpdateMatrices
_TEXT	ENDS
PUBLIC	?SetupRenderParameters@Camera@@QAEXPAUIDirect3DDevice9@@@Z ; Camera::SetupRenderParameters
; Function compile flags: /Ogspy
;	COMDAT ?SetupRenderParameters@Camera@@QAEXPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_d3dDevice$ = 8						; size = 4
?SetupRenderParameters@Camera@@QAEXPAUIDirect3DDevice9@@@Z PROC ; Camera::SetupRenderParameters, COMDAT
; _this$ = ecx

; 59   : {

	push	esi

; 60   : 	d3dDevice->SetPixelShaderConstantF(0, (float *)&invViewProj, 4);

	mov	esi, DWORD PTR _d3dDevice$[esp]
	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, ecx
	push	4
	lea	ecx, DWORD PTR [edi+192]
	push	ecx
	push	0
	push	esi
	call	DWORD PTR [eax+436]

; 61   : 	d3dDevice->SetPixelShaderConstantF(4, (float *)&position, 1);

	mov	eax, DWORD PTR [esi]
	push	1
	add	edi, 256				; 00000100H
	push	edi
	push	4
	push	esi
	call	DWORD PTR [eax+436]
	pop	edi
	pop	esi

; 62   : }

	ret	4
?SetupRenderParameters@Camera@@QAEXPAUIDirect3DDevice9@@@Z ENDP ; Camera::SetupRenderParameters
_TEXT	ENDS
PUBLIC	__real@40c90fdb
PUBLIC	__real@3fb33333
PUBLIC	__real@bfb33333
PUBLIC	?UpdateMove@Camera@@QAEXUMoveInfo@@M@Z		; Camera::UpdateMove
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	_D3DXMatrixRotationY@8:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
;	COMDAT __real@40c90fdb
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@bfb33333
CONST	SEGMENT
__real@bfb33333 DD 0bfb33333r			; -1.4
; Function compile flags: /Ogspy
; File c:\users\matt\desktop\c++projects\demoscene\isystem\i1k_d3d9shader\src\camera.cpp
CONST	ENDS
;	COMDAT ?UpdateMove@Camera@@QAEXUMoveInfo@@M@Z
_TEXT	SEGMENT
_transformX$ = -116					; size = 64
_transformY$ = -52					; size = 64
_transform$ = 12					; size = 64
_rightVec$ = 76						; size = 12
_fwdVec$ = 88						; size = 12
_info$ = 108						; size = 16
_dt$ = 124						; size = 4
?UpdateMove@Camera@@QAEXUMoveInfo@@M@Z PROC		; Camera::UpdateMove, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	lea	ebp, DWORD PTR [esp-100]

; 21   : 	pitch += info.pitch;

	fld	DWORD PTR _info$[ebp+8]
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	mov	esi, ecx
	fadd	DWORD PTR [esi+292]
	push	edi
	fst	DWORD PTR [esi+292]

; 22   : 	if(pitch < -1.4f)

	fld	DWORD PTR __real@bfb33333
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	SHORT $LN30@UpdateMove

; 23   : 		pitch = -1.4f;

	fstp	DWORD PTR [esi+292]
	jmp	SHORT $LN4@UpdateMove
$LN30@UpdateMove:
	fstp	ST(0)
$LN4@UpdateMove:

; 24   : 	if(pitch > 1.4f)

	fld	DWORD PTR __real@3fb33333
	fcom	DWORD PTR [esi+292]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN33@UpdateMove

; 25   : 		pitch = 1.4f;

	fstp	DWORD PTR [esi+292]
	jmp	SHORT $LN3@UpdateMove
$LN33@UpdateMove:
	fstp	ST(0)
$LN3@UpdateMove:

; 26   : 
; 27   : 	yaw += info.yaw;

	fld	DWORD PTR [esi+296]
	fadd	DWORD PTR _info$[ebp+12]
	fst	DWORD PTR [esi+296]

; 28   : 	const float twoPi = 2.0*D3DX_PI;
; 29   : 	if(yaw >= twoPi)

	fld	DWORD PTR __real@40c90fdb
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN36@UpdateMove

; 30   : 		yaw -= twoPi;

	fsub	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+296]
	jmp	SHORT $LN2@UpdateMove
$LN36@UpdateMove:
	fstp	ST(1)
$LN2@UpdateMove:

; 31   : 	if(yaw <= 0)

	fldz
	fcomp	DWORD PTR [esi+296]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN39@UpdateMove

; 32   : 		yaw += twoPi;

	fadd	DWORD PTR [esi+296]
	fstp	DWORD PTR [esi+296]
	jmp	SHORT $LN1@UpdateMove
$LN39@UpdateMove:
	fstp	ST(0)
$LN1@UpdateMove:

; 33   : 
; 34   : 	D3DXMATRIX transform, transformX, transformY;
; 35   : 	D3DXMatrixRotationX(&transformX, pitch);

	fld	DWORD PTR [esi+292]
	push	ecx
	lea	eax, DWORD PTR _transformX$[ebp]
	fstp	DWORD PTR [esp]
	push	eax
	call	_D3DXMatrixRotationX@8

; 36   : 	D3DXMatrixRotationY(&transformY, yaw);

	fld	DWORD PTR [esi+296]
	push	ecx
	lea	eax, DWORD PTR _transformY$[ebp]
	fstp	DWORD PTR [esp]
	push	eax
	call	_D3DXMatrixRotationY@8

; 37   : 	D3DXMatrixMultiply(&transform, &transformX, &transformY);

	lea	eax, DWORD PTR _transformY$[ebp]
	push	eax
	lea	eax, DWORD PTR _transformX$[ebp]
	push	eax
	lea	eax, DWORD PTR _transform$[ebp]
	push	eax
	call	_D3DXMatrixMultiply@12

; 38   : 	D3DXVECTOR3 fwdVec(0,0,-1);

	fldz

; 39   : 	D3DXVec3TransformNormal(&forward, &fwdVec, &transform);

	lea	eax, DWORD PTR _transform$[ebp]
	fst	DWORD PTR _fwdVec$[ebp]
	push	eax
	fstp	DWORD PTR _fwdVec$[ebp+4]
	fld	DWORD PTR __real@bf800000
	lea	eax, DWORD PTR _fwdVec$[ebp]
	push	eax
	fstp	DWORD PTR _fwdVec$[ebp+8]
	lea	edi, DWORD PTR [esi+268]
	push	edi
	call	_D3DXVec3TransformNormal@12

; 40   : 	D3DXVECTOR3 rightVec(1,0,0);

	fld1

; 41   : 	D3DXVec3TransformNormal(&strafe, &rightVec, &transform);

	lea	eax, DWORD PTR _transform$[ebp]
	fstp	DWORD PTR _rightVec$[ebp]
	fldz
	push	eax
	lea	eax, DWORD PTR _rightVec$[ebp]
	fst	DWORD PTR _rightVec$[ebp+4]
	push	eax
	fstp	DWORD PTR _rightVec$[ebp+8]
	lea	ebx, DWORD PTR [esi+280]
	push	ebx
	call	_D3DXVec3TransformNormal@12

; 42   : 	position += info.forward * dt * forward;

	fld	DWORD PTR _info$[ebp]
	fmul	DWORD PTR _dt$[ebp]
	lea	eax, DWORD PTR [esi+260]
	fld	DWORD PTR [edi]

; 43   : 	position += info.strafe * dt * strafe;
; 44   : 	UpdateMatrices();

	mov	ecx, esi
	fmul	ST(0), ST(1)
	fld	DWORD PTR [edi+4]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [edi+8]
	fmulp	ST(3), ST(0)
	fld	DWORD PTR [esi+256]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+256]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]
	lea	eax, DWORD PTR [esi+264]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]
	lea	eax, DWORD PTR [esi+260]
	fld	DWORD PTR _info$[ebp+4]
	fmul	DWORD PTR _dt$[ebp]
	fld	DWORD PTR [ebx]
	fmul	ST(0), ST(1)
	fld	DWORD PTR [ebx+4]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [ebx+8]
	fmulp	ST(3), ST(0)
	fld	DWORD PTR [esi+256]
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [esi+256]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]
	lea	eax, DWORD PTR [esi+264]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [eax]
	call	?UpdateMatrices@Camera@@AAEXXZ		; Camera::UpdateMatrices
	pop	edi
	pop	esi
	pop	ebx

; 45   : }

	add	ebp, 100				; 00000064H
	leave
	ret	20					; 00000014H
?UpdateMove@Camera@@QAEXUMoveInfo@@M@Z ENDP		; Camera::UpdateMove
_TEXT	ENDS
END
